#!/opt/homebrew/bin/bash

BUILD_DIR=${BUILD_DIR:-./build}
FORCE_REBUILD=0

# ... (your existing argument parsing code remains the same)

# Create build directory
mkdir -p $BUILD_DIR

# Copy global assets to build directory
if [ -d "assets" ]; then
  echo "Copying global assets"
  cp -r "assets/"* "$BUILD_DIR/assets/" 2>/dev/null || true
fi

if [[ "$1" == "-s" || "$1" == "--serve" ]]; then
  python3 -m http.server --directory $BUILD_DIR
  exit 0
fi

# Find all markdown and HTML files in src
readarray -d '' pages_found < <(find "src" -maxdepth 3 -type f \( -name "*.md" -o -name "*.html" \) -print0)
pages+=("${pages_found[@]}")

num_entries=${#pages_found[@]}
echo "Found $num_entries pages in src/"

for page in "${pages[@]}"; do
  (
  # Determine the file extension
  extension="${page##*.}"

  # If it's a markdown file, convert to HTML
  if [ "$extension" = "md" ]; then
    # Output file has an HTML extension and no src/ prefix
    new_page="${page%.md}.html"
    new_page="${new_page#src/}"
    
    # Skip if destination exists and is newer than source (unless force rebuild)
    if [[ $FORCE_REBUILD -eq 0 && -f "$BUILD_DIR/$new_page" && "$BUILD_DIR/$new_page" -nt "$page" ]]; then
      echo "Skipping up-to-date: $page"
      exit 0
    fi

    directory=$(dirname -- "$new_page")
    mkdir -p "$BUILD_DIR/$directory"
    mkdir -p "$BUILD_DIR/$directory/assets"

    # Get the page directory for resource path
    page_directory=$(dirname -- "$page")
    
    # Copy post-specific assets if they exist
    if [ -d "$page_directory/assets" ]; then
      cp -r "$page_directory/assets/"* "$BUILD_DIR/$directory/assets/" 2>/dev/null || true
    fi
    
    # Build the page - extract media to post-specific assets directory
    pandoc --toc "$page" -o "$BUILD_DIR/$new_page" \
      --citeproc \
      --filter mermaid-filter \
      --lua-filter=append-back-after-source.lua \
      --lua-filter=target_blank.lua \
      --toc-depth=2 \
      --metadata link-citations=true \
      --bibliography=/Users/valerii/Obsidian/Service/zotero-library.json \
      --csl=/Users/valerii/Obsidian/Service/apa-5th-edition.csl \
      --section-divs \
      --template="default-new.html" \
      # --extract-media="$BUILD_DIR/$directory/assets" \
      # --resource-path="$page_directory:assets"

    echo "Built $page"
  else
    # If it's an HTML file, simply copy it to the destination
    new_page="${page#src/}"
    
    # Skip if destination exists and is newer than source (unless force rebuild)
    if [[ $FORCE_REBUILD -eq 0 && -f "$BUILD_DIR/$new_page" && "$BUILD_DIR/$new_page" -nt "$page" ]]; then
      echo "Skipping up-to-date: $page"
      exit 0
    fi

    directory=$(dirname -- "$new_page")
    mkdir -p "$BUILD_DIR/$directory"
    cp "$page" "$BUILD_DIR/$new_page"
    echo "Copied $page"
  fi
  ) &
done
wait

echo "Build complete! Assets are organized in each post's directory."
